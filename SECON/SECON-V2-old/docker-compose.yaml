services:
  composer:
    container_name: composer_secon
    build:
      context: ./Docker/etc/composer
      dockerfile: Dockerfile
    user: "${UID}:${GID}"
    volumes:
      - "./:/app"
    command: >
      sh -c "
      composer install --ignore-platform-reqs --no-scripts"

  mysql:
    image: mysql:${MYSQL_SECON_VERSION}
    container_name: mysql_secon
    restart: always
    env_file:
      - "./Docker/.env"
    environment:
      - MYSQL_DATABASE=${MYSQL_SECON_DATABASE}
      - MYSQL_ROOT_PASSWORD=${MYSQL_SECON_ROOT_PASSWORD}
      - MYSQL_USER=${MYSQL_SECON_USER}
      - MYSQL_PASSWORD=${MYSQL_SECON_PASSWORD}
    ports:
      - "${MYSQL_SECON_PORT}:3306"
    volumes:
      - "./Docker/data/db/mysql:/var/lib/mysql"

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin_secon
    restart: always
    env_file:
      - "./Docker/.env"
    ports:
      - "${PHP_MY_ADMIN_PORT}:80"
    environment:
      - PMA_ARBITRARY=1
      - PMA_HOST=${MYSQL_SECON_HOST}
      - PMA_USER=${MYSQL_SECON_ROOT_USER}
      - PMA_PASSWORD=${MYSQL_SECON_ROOT_PASSWORD}
    depends_on:
      - mysql

  php-fpm:
    container_name: php_secon
    build:
      context: ./Docker/etc/php
      dockerfile: Dockerfile
    restart: always
    volumes:
      - "../:/var/www/html"
      - "./etc/php/uploads.ini:/usr/local/etc/php/conf.d/uploads.ini"
      - "./etc/php/wait-for-mysql.sh:/usr/local/bin/wait-for-mysql.php"
      - "./etc/php/php-ini-overrides.ini:/etc/php/8.3/fpm/conf.d/99-overrides.ini"
    command: >
      /bin/sh -c "
      sleep 35;
      chmod +x /usr/local/bin/wait-for-mysql.php;
      php /usr/local/bin/wait-for-mysql.php;
      if [ ! -f .env ]; then
        cp .env.example .env;
        chown ${UID}:${GID} .env;
        echo '.env criado a partir de .env.example';
      fi;
      if ! grep -q '^APP_KEY=' .env || grep -q '^APP_KEY=$' .env; then
        php artisan key:generate;
        echo 'Chave de aplicação gerada';
      fi;
      php artisan migrate;
      chmod -R 775 storage bootstrap/cache;
      php-fpm"
    depends_on:
      - mysql
      - composer

  nginx:
    image: nginx:alpine
    container_name: nginx_secon
    env_file:
      - "./Docker/.env"
    volumes:
      - "../:/var/www/html"
      - "./etc/nginx/default.conf:/etc/nginx/conf.d/default.conf"
      - "./etc/nginx/default.template.conf:/etc/nginx/conf.d/default.template"
    ports:
      - "${NGINX_PORT}:${NGINX_PORT}"
    command: /bin/sh -c "envsubst '$$NGINX_HOST $$NGINX_PORT' < /etc/nginx/conf.d/default.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"
    restart: always
    depends_on:
      - php-fpm
      - mysql

  node:
    container_name: node_secon
    image: node:22
    working_dir: /app
    user: "${UID}:${GID}"
    environment:
      - NODE_ENV=development
    volumes:
      - "./:/app"
    ports:
      - "5173:5173"
    command: >
      sh -c "
      if [ ! -d node_modules ]; then
        echo 'Executando npm install...';
        npm install;
      fi;
      npm run dev"

  mailhog:
    container_name: mailhog_secon
    build:
      context: ./Docker/etc/mailhog
      dockerfile: Dockerfile
    ports:
      - "1025:1025"
      - "8025:8025"
    restart: always
